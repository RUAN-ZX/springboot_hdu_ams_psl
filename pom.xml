<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <groupId>cn.ryanalexander</groupId>
    <artifactId>LearnCloud</artifactId>
    <version>1.0.0</version>
    <!--  mvn versions:set -DnewVersion=1.0.0  统一修改！ -->
    <packaging>pom</packaging><!-- 这里添加，父亲用pom 儿子用jar -->

    <modules>
        <module>psl</module>
        <module>sst</module>
        <module>auth</module>
        <module>gateway</module>
    </modules>
    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo1.maven.org/maven2/</url>
        </repository>
    </repositories>
    <!-- 统一管理jar包版本 这里就是一个变量替换 子文件也可以用 但是推荐父亲文件里边用 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <spring.boot.version>2.3.2.RELEASE</spring.boot.version>
        <spring.cloud.version>Hoxton.SR9</spring.cloud.version>
        <spring.cloud.alibaba.version>2.2.6.RELEASE</spring.cloud.alibaba.version>
<!--        <spring.boot.version>2.3.2.RELEASE</spring.boot.version>-->
<!--        <spring.cloud.version>Hoxton.SR1</spring.cloud.version>-->
<!--        <spring.cloud.alibaba.version>2.1.0.RELEASE</spring.cloud.alibaba.version>-->
        <junit.version>4.13.2</junit.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <lombok.version>1.18.12</lombok.version>
        <mysql-connector.version>8.0.27</mysql-connector.version>
        <druid.version>1.1.16</druid.version>
        <mybatis.version>2.2.2</mybatis.version>
        <swagger.version>3.0.0</swagger.version>
    </properties>

    <!-- 子模块继承之后，提供作用：
        锁定版本+子module不用写groupId和version 这里这是提前配置一下 并没有任何dependency的引入！-->
    <!--  这里牛逼的地方在于 特别适合配置dependencies 比如springboot的所有starter依赖的版本 比如springcloud所有的依赖版本！-->
    <!--  其他的组件 如果存在少数几个用特殊版本 可以直接父组件直接import 然后子组件不喜欢那就新引入特殊的版本咯 -->
    <dependencyManagement>
        <dependencies>
            <!--spring boot 2.2.2-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud alibaba 2.1.0.RELEASE-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>
    <!--  常用工具可以不需要多版本控制了。。-->
    <dependencies>
        <!--             自己的公共类-->
        <dependency>
            <groupId>cn.ryanalexander.common</groupId>
            <artifactId>common</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!--        nacos 获取config-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <!--        服务发现-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!--    sentinel 服务限流降级    -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--    测试 开发 相关工具    -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!--  数据连接相关  -->


    </dependencies>

    <!--    不知道为啥 即便dependencyManagement有 还是得显式地去写 因为默认的版本是3.1 可能是后边的依赖覆盖了。。  -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <parameters>true</parameters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <configuration>
                    <fork>true</fork>
                    <addResources>true</addResources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
